{"version":3,"sources":["redux/load/types.js","redux/load/actions.js","redux/load/selectors.js","redux/load/reducer.js","redux/reducers.js","redux/store.js","components/ErrorBoundary/errorImage.jpg","components/ErrorBoundary/ErrorMessage.jsx","components/ErrorBoundary/ErrorBoundary.jsx","components/avatarName.jsx","components/postPicture.jsx","components/postDiscription.jsx","components/postComments.jsx","pages/PostModal.jsx","components/modalCustom.jsx","components/userCard.jsx","components/userAllPosts.jsx","pages/userPosts.jsx","components/users.jsx","components/Card.jsx","components/bulkPosts.jsx","components/showMoreButton.jsx","pages/App.jsx","components/navBar.jsx","AppRouts.jsx","index.jsx","components/ErrorBoundary/errorMessage.module.scss"],"names":["postsLoading","yesNo","type","types","payload","userLoading","url","dispatch","a","fetch","headers","then","res","ok","json","Error","data","console","warn","r","currentUser","error","contactNick","activeUserId","method","body","JSON","stringify","pictureSrc","postId","lastDate","postsPerBatch","limit","Date","getTime","state","loadReducer","allUsersPosts","currentUserPosts","activeUser","updatedUser","aPost","comments","aUser","modalIsOpen","changedPost","loggedUser","localStorage","parse","initState","hasOwnProperty","postsAreLoading","userIsLoading","newCommentObj","combineReducers","action","newAllusersPosts","clearAllusersPosts","newActiveUser","userNick","avatarSrc","addedByUsersID","newUpdatedUser","newPostCommentsAndUser","newComment","commentedBy","date","post","updatedPost","index","findIndex","_id","likes","content","postedBy","picture","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ErrorMessage","className","classes","errorPage","errorImg","src","errorImage","alt","width","ErrorBoundary","errorPresent","this","props","children","PureComponent","AvatarName","nick","isLoggedUser","large","handler","useStyles","nameTag","Box","BoxStyledLoggedIn","Box_style","onClick","AvatarStyled","AvatarLargeStyled","P","styled","Avatar","p","makeStyles","display","maxWidth","minWidth","flexDirection","backgroundColor","borderRadius","border","cursor","PostPicture","StyledImg","img","PostDiscription","PostComments","rawComments","showAll","length","style","fontSize","color","commentList","map","commentObj","indx","StyledLi","comment","li","PostModal","useDispatch","useSelector","sel","undefined","marginBottom","Grid","container","spacing","item","xs","BoxStyled","minHeight","href","textDecorationLine","marginTop","ModalCustom","modal","margin","background","boxShadow","overlay","Modal","open","onClose","hideBackdrop","wrapper","zIndex","UserCard","commentNum","likeNumb","numberOfComments","numberOfLikes","marginLeft","useState","hoverId","setHoverId","sm","md","lg","onMouseOver","target","getAttribute","onMouseOut","UserAllPosts","allPosts","justifyContent","wrap","alignItems","act","UserPosts","match","userIsBeingFollowed","some","id","params","useEffect","marginRight","Button","size","Users","users","isFollower","resetDate","userList","gap","Card","scrollRef","textAreaRef","useRef","btn","height","setNewComment","showComments","setShowComments","postRawComments","Array","isArray","from","likeStatus","likedUserId","Div","ref","toLocaleDateString","StyledSpan","classDiv","variant","disabled","TextareaAutosize","onKeyUp","e","key","catch","err","log","message","postNewComment","value","current","placeholder","maxRows","defaultValue","div","span","BulkPosts","allUsersPosts_","clickManager","lastInd","bulkPosts","i","position","left","paddingLeft","paddingRight","ShowMoreButton","text","isVisible","App","elemRef","rangeInput","initListLimit","listLimit","setListLimit","biasFList","setBiasFList","biasRList","setBiasRList","amountFollowers","setAmountFollowers","amountRecommended","setAmountRecommended","btnText","followerBtnText","recommendedBtnText","calcBtnText","followerUsers","setFollowerUsers","recommendedUsers","setRecommendedUsers","btnFolVisible","setBtnFolVisible","btnRecVisible","setBtnRecVisible","showFullLists","textContent","fetchUsers","userType","amount","posts","setlastDate","followUnfollowTrigger","clickManagerCounter","onePostHandler","likeHandler","StyledApp","BoxStyledHeader","min","max","onMouseUp","onScroll","getBoundingClientRect","y","overflow","stopPropagation","setTimeout","righSidebar","NavBar","StyledNav","StyledNavLink","exact","to","NavLink","nav","AppRouts","path","render","component","Global","createGlobalStyle","ReactDOM","StrictMode","store","CssBaseline","Container","align","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ddd1cf5e.chunk.js","sourcesContent":["const GET_ALL_USERS_POSTS = \"GET_ALL_USERS_POSTS\";\r\nconst CLEAR_ALL_USERS_POSTS = \"CLEAR_ALL_USERS_POSTS\";\r\nconst LOAD_USER_POSTS = \"LOAD_USER_POSTS\";\r\nconst SET_ACTIVE_USER = \"SET_ACTIVE_USER\";\r\nconst LOAD_CURRENT_USER = \"LOAD_CURRENT_USER\";\r\nconst POSTS_ARE_LOADING = \"POSTS_ARE_LOADING\";\r\nconst USER_IS_LOADING = \"USER_IS_LOADING\";\r\nconst TOGGLE_CONTACT_STATUS = \"TOGGLE_CONTACT_STATUS\";\r\nconst GET_POST_COMMENTS_USER = \"GET_POST_COMMENTS_USER\";\r\nconst CLOSE_MODAL = \"CLOSE_MODAL\";\r\nconst OPEN_MODAL = \"OPEN_MODAL\";\r\nconst POST_NEW_COMMENT = \"POST_NEW_COMMENT\";\r\nconst UPDATE_LIKE_STATUS = \"UPDATE_LIKE_STATUS\";\r\n\r\nexport default {\r\n    GET_ALL_USERS_POSTS,\r\n    CLEAR_ALL_USERS_POSTS,\r\n    LOAD_USER_POSTS,\r\n    SET_ACTIVE_USER,\r\n    LOAD_CURRENT_USER,\r\n    POSTS_ARE_LOADING,\r\n    USER_IS_LOADING,\r\n    TOGGLE_CONTACT_STATUS,\r\n    GET_POST_COMMENTS_USER,\r\n    CLOSE_MODAL,\r\n    OPEN_MODAL,\r\n    POST_NEW_COMMENT,\r\n    UPDATE_LIKE_STATUS,\r\n}","import {types} from './';\r\n\r\nexport const loadUserPosts = (url) => async dispatch => {\r\n    dispatch(postsLoading(true));\r\n    try {\r\n        const data = await fetch(url, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then((res) => {\r\n                if (!res.ok) {\r\n                    throw new Error()\r\n                } else {\r\n                    return res.json()\r\n                }\r\n            }\r\n        );\r\n        dispatch({\r\n            type: types.LOAD_USER_POSTS,\r\n            payload: data\r\n        });\r\n    } catch {\r\n        console.warn(\"на этапе получения постов пользователя возникла ошибка. Проверьте соединение\")\r\n    }\r\n\r\n    dispatch(postsLoading(false));\r\n};\r\n\r\nexport const loadOneUser = (url) => async dispatch => {\r\n    dispatch(userLoading(true));\r\n    try {\r\n        const currentUser = await fetch(url, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then(r => r.json());\r\n\r\n        dispatch({\r\n            type: types.LOAD_CURRENT_USER,\r\n            payload: currentUser\r\n        });\r\n        dispatch(userLoading(false));\r\n\r\n    } catch {\r\n        console.error(\"Ошибка загрузки пользователя.\")\r\n    }\r\n};\r\n\r\nexport const postsLoading = (yesNo) => ({\r\n    type: types.POSTS_ARE_LOADING,\r\n    payload: yesNo\r\n});\r\n\r\nexport const userLoading = (yesNo) => ({\r\n    type: types.USER_IS_LOADING,\r\n    payload: yesNo\r\n});\r\n\r\nexport const toggleContactStatus = (contactNick, activeUserId) => async dispatch => {\r\n    const url = `/users/`;\r\n\r\n    try {\r\n        const res = await fetch(url, {\r\n            method: \"PUT\",\r\n            body: JSON.stringify({\r\n                contactNick,\r\n                activeUserId\r\n            }),\r\n            headers: {\"Content-Type\": \"application/json\"}\r\n        })\r\n            .then(r => r.json());\r\n\r\n        dispatch({\r\n            type: types.TOGGLE_CONTACT_STATUS,\r\n            payload: res\r\n        });\r\n    } catch {\r\n        console.error(\"Что-то пошло не так при смене статуса пользователя\")\r\n    }\r\n\r\n\r\n};\r\n\r\nexport const getPostAndComments = (pictureSrc) => async dispatch => {\r\n    const url = `/post/`;\r\n    try {\r\n        const res = await fetch(url, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({pictureSrc}),\r\n            headers: {\"Content-Type\": \"application/json\"}\r\n        }).then(r => r.json());\r\n\r\n        dispatch({\r\n            type: types.GET_POST_COMMENTS_USER,\r\n            payload: res\r\n        });\r\n    } catch {\r\n        console.error(\"ошибка получения постов данного пользователя - проверьте подключение к интернет\")\r\n    }\r\n    dispatch({type: types.OPEN_MODAL, payload: true});\r\n};\r\n\r\nexport const updateLikeStatus = (postId, activeUserId) => async dispatch => {\r\n\r\n    dispatch({type: types.CLEAR_ALL_USERS_POSTS});\r\n    try {\r\n        const res = await fetch('/post/likes', {\r\n            method: \"POST\",\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                postId, activeUserId\r\n            })\r\n        }).then(r => r.json());\r\n\r\n        dispatch({\r\n            type: types.UPDATE_LIKE_STATUS,\r\n            payload: res\r\n        });\r\n    } catch {\r\n        console.warn(\"Сбой данный при получении данных при обновлении статуса лайка поста\")\r\n    }\r\n};\r\n\r\nconst fetchPosts = (lastDate, postsPerBatch, activeUserId) => async dispatch => {\r\n    const data = await fetch(`/posts/latest/`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            lastDate: lastDate,\r\n            limit: postsPerBatch,\r\n            activeUserId: activeUserId\r\n        })\r\n    }).then(r => r.json());\r\n\r\n    if (lastDate === new Date(\"3000-07-26\").getTime()) {\r\n        dispatch({type: types.CLEAR_ALL_USERS_POSTS})\r\n    }\r\n    dispatch({type: types.GET_ALL_USERS_POSTS, payload: data});\r\n};\r\n\r\n\r\nexport default {\r\n    loadUserPosts,\r\n    loadOneUser,\r\n    toggleContactStatus,\r\n    getPostAndComments,\r\n    updateLikeStatus,\r\n    fetchPosts,\r\n}","const getAllUsersPosts = state => state.loadReducer.allUsersPosts;\r\nconst getCurrentUserPosts = state => state.loadReducer.currentUserPosts;\r\nconst getActiveUser = state => state.loadReducer.activeUser;\r\nconst getCurrentUser = state => state.loadReducer.currentUser;\r\nconst getUpdatedUser = state => state.loadReducer.updatedUser;\r\n\r\nconst getModalIsOpen = state => state.loadReducer.modalIsOpen;\r\nconst getPost = state => state.loadReducer.aPost;\r\nconst getComments = state => state.loadReducer.comments;\r\n\r\nconst getaUser = state => state.loadReducer.aUser;\r\n\r\nconst getNewCommentObj = state => state.loadReducer.newCommentObj;\r\nconst getChangedPost = state => state.loadReducer.changedPost;\r\n\r\nexport default {\r\n    getAllUsersPosts,\r\n    getCurrentUserPosts,\r\n    getActiveUser,\r\n    getCurrentUser,\r\n    getUpdatedUser,\r\n    getPost,\r\n    getComments,\r\n    getaUser,\r\n    getModalIsOpen,\r\n    getNewCommentObj,\r\n    getChangedPost,\r\n}","import {types} from './';\r\n\r\nconst fixedUser = {\r\n    \"avatarSrc\": \"https://res.cloudinary.com/vladry/image/upload/v1628196607/avatars/Vlad_avatar_tjrcut.jpg\",\r\n    \"_id\": \"610d38873740f644cccc1cf1\",\r\n    \"posts\": [],\r\n    \"userNick\": \"Vlad\",\r\n    \"__v\": 0\r\n};\r\nconst loggedUser = localStorage['activeUser'] ?\r\n    JSON.parse(localStorage['activeUser']) : {};\r\nconst defaultUser = loggedUser.hasOwnProperty('avatarSrc') ? loggedUser\r\n    : fixedUser;\r\n\r\nconst initState = {\r\n    allUsersPosts: [],\r\n    activeUser: defaultUser,\r\n    currentUserPosts: [],\r\n    currentUser: {},\r\n    postsAreLoading: false,\r\n    userIsLoading: false,\r\n    updatedUser: {},\r\n    modalIsOpen: false,\r\n    newCommentObj: {},\r\n    aPost: '',\r\n    comments: '',\r\n    aUser: '',\r\n    changedPost: {},\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.GET_ALL_USERS_POSTS:\r\n            const newAllusersPosts = {...state};\r\n            newAllusersPosts.allUsersPosts = [...newAllusersPosts.allUsersPosts, ...action.payload];\r\n            return newAllusersPosts;\r\n        case types.CLEAR_ALL_USERS_POSTS:\r\n            const clearAllusersPosts = {...state};\r\n            clearAllusersPosts.allUsersPosts = [];\r\n            return clearAllusersPosts;\r\n        case types.SET_ACTIVE_USER:\r\n            localStorage['activeUser'] = JSON.stringify(action.payload);\r\n            const newActiveUser = {...state};\r\n            newActiveUser.activeUser = {...action.payload};\r\n            newActiveUser.activeUser.userNick = action.payload.userNick;\r\n            newActiveUser.activeUser.avatarSrc = action.payload.avatarSrc;\r\n            newActiveUser.activeUser.addedByUsersID = action.payload.addedByUsersID;\r\n            return newActiveUser;\r\n        case types.LOAD_USER_POSTS:\r\n            return {...state, currentUserPosts: action.payload};\r\n        case types.LOAD_CURRENT_USER:\r\n            return {...state, currentUser: action.payload};\r\n        case types.POSTS_ARE_LOADING:\r\n            return {...state, postsAreLoading: action.payload};\r\n        case types.USER_IS_LOADING:\r\n            return {...state, userIsLoading: action.payload};\r\n        case types.TOGGLE_CONTACT_STATUS:\r\n            const newUpdatedUser = {...state, updatedUser: action.payload};\r\n            newUpdatedUser.updatedUser.addedByUsersID = action.payload.addedByUsersID;\r\n            return newUpdatedUser;\r\n        case types.GET_POST_COMMENTS_USER:\r\n            const newPostCommentsAndUser = {...state};\r\n            newPostCommentsAndUser.aPost = {...action.payload[0]};\r\n            newPostCommentsAndUser.comments = [...action.payload[1]];\r\n            newPostCommentsAndUser.aUser = {...action.payload[2]};\r\n            return newPostCommentsAndUser;\r\n        case types.CLOSE_MODAL:\r\n            return {...state, modalIsOpen: false};\r\n        case types.OPEN_MODAL:\r\n\r\n            return {...state, modalIsOpen: true};\r\n        case types.POST_NEW_COMMENT:\r\n            const newComment = {...state};\r\n            newComment.newCommentObj.commentedBy = action.payload.commentedBy;\r\n            newComment.newCommentObj.postId = action.payload.postId;\r\n            newComment.newCommentObj.date = action.payload.date;\r\n            return newComment;\r\n        case types.UPDATE_LIKE_STATUS:\r\n            const post = action.payload;\r\n            const updatedPost = {...state};\r\n            const index = updatedPost.allUsersPosts.findIndex(aPost => aPost._id === post._id);\r\n            updatedPost.allUsersPosts[index] = {...post};\r\n            updatedPost.allUsersPosts[index].comments = [...post.comments];\r\n            updatedPost.allUsersPosts[index].likes = [...post.likes];\r\n            updatedPost.allUsersPosts[index].content = post.content;\r\n            updatedPost.allUsersPosts[index].postedBy = post.postedBy;\r\n            updatedPost.allUsersPosts[index].picture = post.picture;\r\n            updatedPost.changedPost = {...post};\r\n            return updatedPost;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n","import {combineReducers} from 'redux';\r\nimport {loadReducer} from \"./load/\";\r\n\r\nexport default combineReducers(\r\n    {\r\n        loadReducer,\r\n    }\r\n);","import {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport rootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport default createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n","export default __webpack_public_path__ + \"static/media/errorImage.11f20b19.jpg\";","import React from 'react';\r\nimport classes from './errorMessage.module.scss';\r\nimport errorImage from './errorImage.jpg';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <div className={classes.errorPage}>\r\n            <h1>'An Error Happened...'</h1>\r\n            <h3>\"Something Crashed Here ..... \"</h3>\r\n            <div>\r\n                <img className={classes.errorImg} src={errorImage} alt='error_picture' width='600px'/>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default ErrorMessage;","import React, {PureComponent} from 'react';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nclass ErrorBoundary extends PureComponent {\r\n    state = {errorPresent: false};\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return ()=>({errorPresent: true})\r\n    };\r\n\r\n    render() {\r\n        if (this.state.errorPresent) {\r\n            return <ErrorMessage/>\r\n        } else\r\n            return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/avatar';\r\nimport Box from '@material-ui/core/box';\r\n\r\nconst AvatarName = ({nick, isLoggedUser = true, large = false, src, handler}) => {\r\n\r\n    const classes = useStyles();\r\n    const nameTag = !large? nick : `logged: ${nick}`;\r\n\r\n    return (\r\n        <Box\r\n            className={isLoggedUser ? classes.BoxStyledLoggedIn : classes.Box_style}\r\n            onClick={handler}\r\n        >\r\n            {!large && <AvatarStyled alt=\"user-avatar\" src={src}/>}\r\n            {large && <AvatarLargeStyled alt=\"user-avatar\" src={src}/>}\r\n            <P>{nameTag}</P>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default AvatarName;\r\n\r\n\r\nconst AvatarStyled = styled(Avatar)`\r\nwidth: 25px;\r\nheight: 25px;\r\nmargin: 2px;\r\nborder: 1px solid darkgreen;\r\n`;\r\nconst AvatarLargeStyled = styled(Avatar)`\r\nwidth: 35px;\r\nheight: 35px;\r\nmargin: 3px;\r\nborder: 3px solid darkred;\r\n`;\r\nconst P = styled.p`\r\ncolor: darkslategrey;\r\nmargin: 0 auto;\r\nfont-size: 12px;\r\nline-height: 25px;\r\n`;\r\n\r\nconst useStyles = makeStyles({\r\n    Box_style: {   //доп стилизация material-ui:  https://material-ui.com/ru/styles/basics/\r\n        display: 'flex',\r\n        maxWidth: \"18em\",\r\n        minWidth: '8em',\r\n        flexDirection: 'row',\r\n        backgroundColor: 'lightgoldenrodyellow',\r\n        borderRadius: '4px',\r\n        border: '1px solid lightgray',\r\n\r\n        \"&:hover\": {\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    BoxStyledLoggedIn: {\r\n        display: 'flex',\r\n        maxWidth: \"18em\",\r\n        minWidth: '10em',\r\n        flexDirection: 'row',\r\n        borderRadius: '4px',\r\n        border: '1px solid lightgray',\r\n        backgroundColor: 'lightcoral',\r\n    }\r\n});","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PostPicture = (props) => {\r\n    return (\r\n            <StyledImg src={props.picture} width='450px' alt='post-picture'/>\r\n    );\r\n};\r\n\r\nexport default PostPicture;\r\n\r\nconst StyledImg = styled.img`\r\nborder-radius: 30px;\r\nborder: 3px solid red;\r\n`;","import React from 'react';\r\n\r\nconst PostDiscription = (props) => {\r\n    return (\r\n        <>\r\n            <p>{props.content}</p>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostDiscription;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PostComments = (props) => {\r\n    let {rawComments, showAll} = props;\r\n    if (!rawComments || rawComments.length === 0) return <p style={{fontSize: '1em', color: '#777'}}>\r\n        никто, пока - что не оставил здесь комментарий</p>;\r\n\r\n    const commentList = rawComments.map((commentObj, indx) => {\r\n        if (indx > 0 && !showAll) return;\r\n        return (\r\n            <StyledLi key={indx}>\r\n                <span>{commentObj.comment}</span>\r\n            </StyledLi>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <ul>\r\n            {commentList}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default PostComments;\r\n\r\n\r\nconst StyledLi = styled.li`\r\n  &:before {\r\n    content: '➢ ';\r\n    position: relative;\r\n    left: -6px;\r\n  }\r\n    //list-style-type: '➢  ';\r\n`;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport '@material-ui/system';\r\nimport AvatarName from \"../components/avatarName\";\r\nimport styled from \"styled-components\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {sel, types} from \"../redux/load\";\r\nimport PostPicture from '../components/postPicture';\r\nimport PostDiscription from '../components/postDiscription';\r\nimport PostComments from '../components/postComments';\r\n\r\nconst PostModal = () => {\r\n\r\n    const dispatch=useDispatch();\r\n    const aPost = useSelector(sel.getPost);\r\n    const comments = useSelector(sel.getComments);\r\n    const aUser = useSelector(sel.getaUser);\r\n\r\n    if (aPost === undefined) return (<p>is loading</p>);\r\n\r\n    return (\r\n        <div>\r\n            <button type='button' onClick={()=>{dispatch({type: types.CLOSE_MODAL, payload: false})}}\r\n                    style={{marginBottom: '10px', color: 'red'}}>\r\n                close window\r\n            </button>\r\n\r\n            <Grid container spacing={2}>\r\n\r\n                <Grid item xs={8} className={`container  boxGenStyle`}>\r\n                    <Box className={`post-picture  boxGenStyle`}>\r\n                        <PostPicture picture={aPost.picture}/>\r\n                    </Box>\r\n                </Grid>\r\n\r\n                <Grid item xs={4} display='flex' flex-direction='column'\r\n                      className={`right-sidebar   boxGenStyle`}>\r\n                    <BoxStyled minHeight='50px' className={`right-header   boxGenStyle`}>\r\n                        <a href='#'><AvatarName nick={aUser.userNick} src={aUser.avatarSrc}\r\n                                                large={true}/></a>\r\n\r\n                    </BoxStyled>\r\n                    <Box minHeight='60px' className={`post-discription  boxGenStyle`}>\r\n                        <p style={{fontSize: \"0.7em\", textDecorationLine: 'underline',  marginBottom: '10px', marginTop: '10px'}}>Post Discription:</p>\r\n                        <PostDiscription content={aPost.content}/>\r\n                    </Box>\r\n                    <Box minHeight='220px' className={`comments   boxGenStyle`}>\r\n                        <p style={{fontSize: \"0.7em\", textDecorationLine: 'underline', marginBottom: '10px', marginTop: '10px'}}>Comments:</p>\r\n                        <PostComments rawComments={comments} showAll={true}/></Box>\r\n\r\n                    <Box minHeight='30px' className={`footer   boxGenStyle`}>footer</Box>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostModal;\r\n\r\nconst BoxStyled = styled(Box)`\r\n\r\n`;","import React from 'react';\r\nimport {sel, types} from '../redux/load';\r\nimport PostModal from \"../pages/PostModal\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Modal} from '@material-ui/core';  //https://material-ui.com/components/modal/\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst ModalCustom = () => {\r\n    const dispatch = useDispatch();\r\n    const useStyles = makeStyles({\r\n       modal: {\r\n           margin: '30px auto',\r\n           background: 'rgba(0, 0, 0, 0.6)',\r\n           width: '90%',\r\n           boxShadow: '13px 13px 9px 0px rgba(8, 63, 195, 0.33)',\r\n\r\n\r\n           overlay: {\r\n               margin: '30px auto',\r\n               background: 'rgba(0, 0, 0, 0.6)',\r\n               width: '90%',\r\n               boxShadow: '13px 13px 9px 0px rgba(8, 63, 195, 0.33)',\r\n           }\r\n       }\r\n    });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n            <Modal className={classes.modal}\r\n                   open={useSelector(sel.getModalIsOpen)}\r\n                   onClose={()=>dispatch({type: types.CLOSE_MODAL, payload: false})}\r\n                   hideBackdrop={false}\r\n            >\r\n                <div style={wrapper}>\r\n                <PostModal/>\r\n                </div>\r\n            </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalCustom;\r\n\r\nconst wrapper = {\r\n    zIndex: '2',\r\n    background: 'rgba(255, 255, 255, 0.9)'\r\n\r\n};","import React, {useState} from 'react';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport styled from \"styled-components\";\r\n\r\nconst UserCard = ({post}) => {\r\n        const {picture} = post;\r\n        const commentNum = post.comments.length;\r\n        const likeNumb = post.likes.length;\r\n        const numberOfComments = <span><ChatIcon color=\"primary\"/>{commentNum}</span>;\r\n        const numberOfLikes = <span style={{marginLeft: '30px'}}><FavoriteIcon color=\"secondary\"/>{likeNumb}</span>;\r\n    const [hoverId, setHoverId] = useState('');\r\n\r\n        return (\r\n            <Grid key={post._id} item xs={6} sm={4} md={3} lg={2}>\r\n                <Box onMouseOver={({target}) => {\r\n                    setHoverId(target.getAttribute('data-name'));\r\n                }}\r\n                     onMouseOut={() => {\r\n                         setHoverId('');\r\n                     }}>\r\n                        { (hoverId === picture) && numberOfComments}{ (hoverId === picture) && numberOfLikes}\r\n                    <StyledImg data-name={picture} src={picture} width='190px' alt='a-post-picture'/>\r\n                </Box>\r\n            </Grid>\r\n        );\r\n\r\n};\r\n\r\nexport default UserCard;\r\n\r\nconst StyledImg = styled.img`\r\nborder-radius: 10px;\r\nborder: 3px solid cadetblue;\r\ntransition-duration: 0.1s;\r\n&:hover {\r\nfilter: brightness(0.6);\r\ntransition-duration: 0.1s;\r\n}; \r\n`;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {act} from \"../redux/load\";\r\nimport {useDispatch} from 'react-redux';\r\nimport ModalCustom from \"./modalCustom\";\r\n\r\n\r\nimport UserCard from '../components/userCard';\r\n\r\nconst UserAllPosts = ({data}) => {\r\n        const dispatch = useDispatch();\r\n\r\n\r\n        const onePostHandler = ({target}) => {\r\n            if (!target.src) return;\r\n            dispatch(act.getPostAndComments(target.src));\r\n        };\r\n\r\n        let allPosts = [];\r\n        if (data) {\r\n            allPosts = data.map(  (aPost) =>\r\n                <UserCard key={aPost._id} post={aPost}/>)\r\n        }\r\n\r\n        return (\r\n            <Grid container spacing={1} justifyContent='space-between' wrap='wrap' alignItems='center'\r\n                  onClick={onePostHandler}>\r\n                {allPosts}\r\n                <ModalCustom/>\r\n            </Grid>\r\n        );\r\n    }\r\n;\r\n\r\nexport default UserAllPosts;\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {act, sel} from '../redux/load';\r\nimport UserAllPosts from \"../components/userAllPosts\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n\r\nconst UserPosts = ({match}) => {\r\n    const currentUserPosts = useSelector(sel.getCurrentUserPosts);\r\n    const activeUser = useSelector(sel.getActiveUser);\r\n    const currentUser = useSelector(sel.getCurrentUser);\r\n    const dispatch = useDispatch();\r\n    let userIsBeingFollowed = false;\r\n    if (currentUser.addedByUsersID && currentUser.addedByUsersID.length > 0) {\r\n        userIsBeingFollowed = (currentUser.addedByUsersID.some(id => id === activeUser._id));\r\n    }\r\n\r\n    //фечуем все посты текущего юзера\r\n    const userNick = match.params.userNick;\r\n\r\n    useEffect(() => {\r\n        dispatch(act.loadUserPosts(`/posts/${userNick}`));\r\n\r\n        // фечуем данные текущего юзера\r\n        dispatch(act.loadOneUser(`/users/${userNick}`));\r\n\r\n    }, [userNick, useSelector(sel.getUpdatedUser)]);\r\n\r\n    return (\r\n        <Box className='user-posts'>\r\n            <Box display='flex' justifyContent='center' alignItems='center' marginBottom='20px'>\r\n                <div className='user-avatar'>\r\n                    <Avatar alt=\"user-avatar\"\r\n                            src={currentUser.avatarSrc}\r\n                    />\r\n\r\n                </div>\r\n                <Box marginLeft='20px' marginRight='20px'><h3>Посты пользователя: {currentUser.userNick}</h3></Box>\r\n                <Button size='small' color=\"primary\" onClick={() => {\r\n                    dispatch(act.toggleContactStatus(currentUser.userNick, activeUser._id));\r\n                }}\r\n                    >{userIsBeingFollowed ? 'Отписаться' : 'Подписаться'}</Button>\r\n                    </Box>\r\n\r\n                    <UserAllPosts data={currentUserPosts}/>\r\n\r\n                    </Box>\r\n                    )\r\n                    ;\r\n                    };\r\n\r\n                    export default UserPosts;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport AvatarName from '../components/avatarName';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport PersonAddDisabledOutlinedIcon from '@material-ui/icons/PersonAddDisabledOutlined';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {types, sel} from '../redux/load';\r\n\r\nconst Users = (props) => {\r\n    const dispatch = useDispatch();\r\n    const activeUser = useSelector(sel.getActiveUser);\r\n    const urlPath = '/posts/';\r\n    const {users, isFollower, handler, resetDate} = props;\r\n    if (!users) return <p>loading</p>;\r\n\r\n\r\n    const userList = users.map((aUser) => {\r\n        const isLoggedUser = (activeUser.userNick === aUser.userNick);\r\n\r\n        return (\r\n            <li key={aUser._id} data-name={aUser._id} style={{display: 'flex', gap: '5px'}}>\r\n                <a href={`${urlPath}${aUser.userNick}`}><AvatarName nick={aUser.userNick}\r\n                    isLoggedUser={isLoggedUser}  src={aUser.avatarSrc}\r\n                /></a>\r\n                {/*в Реакте, чтобы отправить параметр handler, нужно обернуть его в CB ф-цию:*/}\r\n                {!isLoggedUser && isFollower && <P onClick={() => handler(aUser.userNick)}><PersonAddDisabledOutlinedIcon/></P>}\r\n                {!isLoggedUser && !isFollower && <P onClick={() => handler(aUser.userNick)}><PersonAddOutlinedIcon/></P>}\r\n                <button type='button' onClick={() => {\r\n                    dispatch({\r\n                        type: types.SET_ACTIVE_USER,\r\n                        payload: aUser\r\n                    });\r\n\r\n                    resetDate();\r\n                }}\r\n                        style={{fontSize: '10px', color: 'red', border: 'none'}}>\r\n                    {!isLoggedUser && 'log in'}\r\n                </button>\r\n            </li>\r\n        )\r\n    });\r\n    return (\r\n        <>\r\n            <ul>\r\n                {userList}\r\n            </ul>\r\n\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Users;\r\n\r\n\r\nconst P = styled.p`\r\nmargin-left: 10px;\r\n    &:hover {\r\n        cursor: pointer\r\n}`;","import React, {useState, useRef} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {sel} from '../redux/load';\r\n\r\nimport {makeStyles, TextareaAutosize} from '@material-ui/core';\r\nimport styled from \"styled-components\";\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nimport {Button} from '@material-ui/core';\r\nimport PostComments from \"./postComments\";\r\n\r\nconst Card = ({post, scrollRef}) => {\r\n    const textAreaRef = useRef();\r\n    const activeUserId = useSelector(sel.getActiveUser)._id;\r\n    const useStyles = makeStyles({\r\n        btn: {\r\n            fontSize: 10,\r\n            height: 20,\r\n            marginTop: 5,\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const [newComment, setNewComment] = useState({});\r\n    const [showComments, setShowComments] = useState(false);\r\n\r\n    const postRawComments = Array.isArray(post.comments) ? Array.from(post.comments)\r\n        : [{comment: 'no comments yet'}, {comment: 'be first to comment'}];\r\n    let likeStatus = <FavoriteBorderIcon id='notLiked'/>;\r\n    if (!post.likes) {\r\n    } else {\r\n        likeStatus = post.likes.some(likedUserId => (likedUserId === activeUserId)) ?\r\n            < FavoriteIcon id='didLike'/>\r\n            : <FavoriteBorderIcon id='notLiked'/>;\r\n    }\r\n\r\n\r\n    const postNewComment = (postId, comment, commentedBy) => {\r\n        const url = '/comments/';\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                postId,\r\n                comment,\r\n                commentedBy\r\n            })\r\n        }).then(r => r.json())\r\n            .then(newCommentObj => setNewComment(newCommentObj)\r\n            )\r\n            .catch(err => console.log(err.message));\r\n    };\r\n    const handlePostComment = (e) => {\r\n        if (e.key !== \"Escape\") return;\r\n        const postId = e.target.id;\r\n        const comment = e.target.value;\r\n        postNewComment(postId, comment, activeUserId);\r\n        textAreaRef.current.value = '';\r\n    };\r\n    const toggleComments = () => {\r\n        setShowComments(!showComments)\r\n    };\r\n\r\n    return (\r\n        <Div key={post._id} {...(scrollRef !==null)? {ref: scrollRef}: {}} >\r\n            <StyledImg src={post.picture} width='80%' alt='post-picture'\r\n                       id='like' data-testid='like' data-name={post._id}/>\r\n            <p>Date: {new Date(post.date).toLocaleDateString()} Title: <StyledSpan>{post.content}</StyledSpan></p>\r\n            <div style={classDiv}>\r\n                <PostComments rawComments={postRawComments} showAll={showComments}/>\r\n                {post._id === newComment.postId\r\n                && <P>{newComment.comment}</P>}\r\n                <Button data-testid='toggleComments' className={classes.btn} onClick={toggleComments} variant='outlined'\r\n                        disabled={(postRawComments.length <= 1) && true}>\r\n                    {!showComments ? \"show all\" : \"show less\"}\r\n                </Button>\r\n            </div>\r\n\r\n            <p>\r\n                <TextareaAutosize ref={textAreaRef} aria-label={post._id}\r\n                                  onKeyUp={handlePostComment} id={post._id}\r\n                                  placeholder='leave a comment'\r\n                                  maxRows='3' defaultValue=''/>\r\n            </p>\r\n\r\n            {likeStatus}\r\n\r\n        </Div>\r\n\r\n    );\r\n};\r\n\r\nexport default Card;\r\n\r\n\r\nconst Div = styled.div`\r\nmargin-top: 5%;\r\n`;\r\n\r\nconst classDiv = {\r\n    'maxWidth': '70%',\r\n    'color': 'darkslategrey',\r\n    'margin': '12px auto 2px'\r\n};\r\n\r\n\r\nconst StyledSpan = styled.span`\r\nmax-width: 70%;\r\ncolor: darkgreen;\r\nfont-size: 14px;\r\nfont-weight: bold;\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\nborder-radius: 30px;\r\nborder: 1px solid darkblue;\r\nbox-shadow: 3px 3px 3px 0 rgba(8, 63, 195, 0.33);\r\ntransition-duration: 0.3s;\r\n&:hover {\r\nopacity: 0.7;\r\ntransition-duration: 0.3s;\r\n}\r\n`;\r\n\r\nconst P = styled.p`\r\ncolor: red\r\n`;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst BulkPosts = ({allUsersPosts_, clickManager, scrollRef}) => {\r\n    if (!allUsersPosts_ || allUsersPosts_.length === 0) return <div>loading</div>;\r\n    const lastInd = allUsersPosts_.length - 1;\r\n    const bulkPosts = allUsersPosts_.map((post, i) =>\r\n        <Card key={post._id} post={post} scrollRef={(lastInd === i)? scrollRef : null}/>\r\n    );\r\n\r\n\r\n    return (\r\n        <div onClick={clickManager}>\r\n            {bulkPosts}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BulkPosts;\r\n","import React, {useEffect} from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    btn: {\r\n        position: 'relative',\r\n        left: -15,\r\n        fontSize: 8,\r\n        paddingLeft: 26,\r\n        paddingRight: 26,\r\n        height: 15,\r\n        marginTop: 5,\r\n    }\r\n});\r\n\r\nconst ShowMoreButton = ({text, isVisible, handler}) => {\r\n    const classes = useStyles();\r\n    const btn = <Button className={classes.btn}\r\n                        color=\"primary\"\r\n                        variant='contained'\r\n                        disabled={!isVisible}\r\n                        onClick={handler}\r\n    >\r\n        {text}\r\n    </Button>;\r\n    // let Btn = isVisible ? btn : null;\r\n    useEffect(() => {\r\n        // Btn = isVisible ? btn : null;\r\n    }, [isVisible]);\r\n\r\n    return (\r\n        <>\r\n            {/*{Btn}*/}\r\n            {btn}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShowMoreButton;","import React, {useEffect, useState, useRef} from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport Users from \"../components/users\";\r\nimport AvatarName from \"../components/avatarName\";\r\nimport BulkPosts from '../components/bulkPosts';\r\nimport ShowMoreButton from '../components/showMoreButton';\r\nimport styled from 'styled-components';\r\nimport {sel, act, types} from '../redux/load/';\r\nimport ModalCustom from '../components/modalCustom';\r\n\r\nfunction App() {\r\n\r\n    const elemRef = useRef();\r\n    const rangeInput = useRef();\r\n    /*** ИСХОДНЫЕ ЗНАЧЕНИЯ ДЛЯ БЛОКА СПИСКОВ ПОЛЬЗОВАТЕЛЕЙ ***/\r\n    const initListLimit = localStorage['rangeDefaultValue'] ?\r\n        JSON.parse(localStorage['rangeDefaultValue']) : 3;\r\n    const [listLimit, setListLimit] = useState(initListLimit);\r\n    const [biasFList, setBiasFList] = useState(listLimit); //шаги смещения при пролистывании списков followers и recommended юзеров.\r\n    const [biasRList, setBiasRList] = useState(listLimit); //шаги смещения при пролистывании списков followers и recommended юзеров.\r\n    const [amountFollowers, setAmountFollowers] = useState(0);\r\n    const [amountRecommended, setAmountRecommended] = useState(0);\r\n    const calcBtnText = () => {\r\n        let followerBtnText = amountFollowers - biasFList;\r\n        followerBtnText = (followerBtnText < 0) ? 0 : followerBtnText; //исключить уход ниже нуля\r\n        let recommendedBtnText = amountRecommended - biasRList;\r\n        recommendedBtnText = (recommendedBtnText < 0) ? 0 : recommendedBtnText;\r\n        return [`${followerBtnText} more`, `${recommendedBtnText} more`]\r\n    };\r\n    const btnText = calcBtnText();\r\n\r\n    const [followerUsers, setFollowerUsers] = useState([]);\r\n    const [recommendedUsers, setRecommendedUsers] = useState([]);\r\n\r\n    const [btnFolVisible, setBtnFolVisible] = useState(false);\r\n    const [btnRecVisible, setBtnRecVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    /*** УПРАВЛЕНИЕ ФЕТЧЕВАНИЕМ СПИСКОВ ПОЛЬЗОВАТЕЛЕЙ ***/\r\n    const showFullLists = ({target}) => {\r\n        if (target.textContent === btnText[0]) {\r\n            setBiasFList(biasFList + listLimit);\r\n            if (biasFList + 1 >= amountFollowers) {\r\n                setBtnFolVisible(false)\r\n            }\r\n            //а фетчинг теперь произойдет после пере-рендеринга в useEffect()\r\n        } else if (target.textContent === btnText[1]) {\r\n            if (recommendedUsers.length === 0) {\r\n                setBtnRecVisible(false);\r\n            }\r\n            setBiasRList(biasRList + listLimit);\r\n            if (biasRList + 1 >= amountRecommended) {\r\n                setBtnRecVisible(false);\r\n            }\r\n\r\n        } else {\r\n            setBiasFList(0);\r\n            setBiasRList(0);\r\n            fetchUsers(\"followers\", listLimit);\r\n            fetchUsers(\"recommended\", listLimit);\r\n        }\r\n    };\r\n\r\n    const fetchUsers = (userType, limit) => {\r\n\r\n        const url = `/users/`;\r\n        fetch(url, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                activeUserId: activeUser._id,\r\n                limit: limit,\r\n                userType: userType\r\n            }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then(r => r.json())\r\n            .then(data => {\r\n                    const [userList, amount] = data;\r\n                    if (userType === \"followers\") {\r\n                        setFollowerUsers(userList);\r\n                        setAmountFollowers(amount);\r\n                        if (userList.length > 0) setBtnFolVisible(true);\r\n\r\n                    } else if (userType === \"recommended\") {\r\n                        setRecommendedUsers(userList);\r\n                        setAmountRecommended(amount);\r\n                        if (userList.length > 0) setBtnRecVisible(true);\r\n                    }\r\n\r\n                }\r\n            ).catch((err) => console.error(err.message));\r\n    };\r\n\r\n    /*** ПОЛУЧЕНИЕ Followers ПОЛЬЗОВАТЕЛЕЙ ***/\r\n    useEffect(() => {\r\n        fetchUsers(\"followers\", biasFList);\r\n    }, [biasFList, useSelector(sel.getUpdatedUser)]);\r\n    /*** ПОЛУЧЕНИЕ Recommended ПОЛЬЗОВАТЕЛЕЙ ***/\r\n    useEffect(() => {\r\n        fetchUsers(\"recommended\", biasRList);\r\n    }, [biasRList, useSelector(sel.getUpdatedUser)]);\r\n\r\n    /*-----------------------------------------------------------------------------------*/\r\n\r\n\r\n    /*** БЛОК ПОДГОТОВКИ К ПОЛУЧЕНИЮ СПИСКОВ ПОСТОВ ВСЕХ ПОЛЬЗОВАТЕЛЕЙ И ТЕКУЩЕГО ПОЛЬЗОВАТЕЛЯ В СИСТЕМЕ ***/\r\n    const posts = useSelector(sel.getAllUsersPosts);\r\n    const [lastDate, setlastDate] = useState(Date.parse(\"2030-09-02T13:11:35.374+00:00\"));\r\n    const activeUser = useSelector(sel.getActiveUser);\r\n    const postsPerBatch = 3;\r\n\r\n    /*** ПОЛУЧЕНИЕ ПОСТОВ ПОЛЬЗОВАТЕЛЕЙ ***/\r\n    const incrementDate = () => {\r\n        if (posts && posts.length > 0) {\r\n            setlastDate(Date.parse(posts[posts.length - 1].date));\r\n        } else {\r\n            setlastDate(new Date(\"3000-07-26\").getTime());\r\n            // альтернативы:\r\n            //  Date.parse(\"2030-09-02T13:11:35.374+00:00\");\r\n            //  new Date(\"2021-09-02T13:11:35.374+00:00\").getTime();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(act.fetchPosts(lastDate, postsPerBatch, activeUser._id));\r\n    }, [lastDate, useSelector(sel.getChangedPost), useSelector(sel.getActiveUser)]);\r\n\r\n    const resetDate = () => {\r\n        setlastDate(new Date(\"3000-07-26\").getTime());\r\n        dispatch({type: types.CLEAR_ALL_USERS_POSTS});\r\n    };\r\n    /*-----------------------------------------------------------------------------------*/\r\n\r\n    const followUnfollowTrigger = (nick) => {\r\n        dispatch(act.toggleContactStatus(nick, activeUser._id));\r\n    };\r\n\r\n    let clickManagerCounter = 0;\r\n    const clickManager = (e) => {\r\n\r\n        e.stopPropagation();\r\n        const {target}= e;\r\n        clickManagerCounter += 1;\r\n\r\n        setTimeout(() => {\r\n            if (clickManagerCounter === 1) onePostHandler(target);\r\n            else if (clickManagerCounter > 1) likeHandler(target);\r\n            clickManagerCounter = 0;\r\n        }, 300);\r\n    };\r\n\r\n    const onePostHandler = (target) => {\r\n        // if (!target.src) return;\r\n        dispatch(act.getPostAndComments(target.src));\r\n    };\r\n\r\n    const likeHandler = (target) => {\r\n        if (!target.src) return;\r\n        if (target.id === 'like') {\r\n            const postId = target.getAttribute('data-name');\r\n            dispatch(act.updateLikeStatus(postId, activeUser._id));\r\n            resetDate();\r\n        }\r\n    };\r\n\r\n    const scrollHandler = () => {\r\n        const position = elemRef.current ? elemRef.current.getBoundingClientRect().y : 1000;\r\n        if (position < 200) {\r\n            incrementDate();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <StyledApp>\r\n            <Grid container spacing={2}>\r\n\r\n                <Grid item xs={8} className='left-scroll-items'>\r\n                    <BoxStyledHeader className='left-header' >\r\n                        <AvatarName nick={activeUser.userNick} src={activeUser.avatarSrc}/>\r\n                        <div className='settings'>\r\n                            <h3>Кол-во пользователей в юзер-листах</h3>\r\n                            <input type='range' ref={rangeInput} min='0' max='8' defaultValue={listLimit}\r\n                                   onMouseUp={(e) => {\r\n                                       localStorage['rangeDefaultValue'] = rangeInput.current.value;\r\n                                       setListLimit(+rangeInput.current.value);\r\n                                       showFullLists(e);\r\n                                   }\r\n                                   }\r\n                            />\r\n                            <span>{listLimit}</span>\r\n                        </div>\r\n                    </BoxStyledHeader>\r\n\r\n                    <BoxStyled onScroll={scrollHandler} overflow='scroll' height='500px' className='scroll-items' minHeight='350px'>\r\n                        <BulkPosts scrollRef={elemRef} allUsersPosts_={posts}\r\n                                   clickManager={clickManager} resetDate={resetDate}\r\n                        />\r\n                        <p>\r\n                            Congrats! Вы умудрились просмотреть все посты существующих пользователей Instagram-а!\r\n                        </p>\r\n                    </BoxStyled>\r\n                </Grid>\r\n\r\n                <Grid item xs={2} className='right-sidebar' display='flex'\r\n                      flex-direction='column'>\r\n\r\n                    <BoxStyledHeader className='right-header' width='190%'>\r\n                        <a href={`/posts/${activeUser.userNick}`}>\r\n                            <AvatarName nick={activeUser.userNick} src={activeUser.avatarSrc}\r\n                                        large={true}/>\r\n                        </a>\r\n                    </BoxStyledHeader>\r\n\r\n                    <BoxStyled className='added-users' minHeight='130px' style={righSidebar}>\r\n                        <p>Followers</p>\r\n                        <Users users={followerUsers} isFollower={true}\r\n                               handler={followUnfollowTrigger} resetDate={resetDate}/>\r\n                        <ShowMoreButton text={btnText[0]} isVisible={btnFolVisible} handler={showFullLists}/>\r\n                    </BoxStyled>\r\n                    <BoxStyled className='recomended-users' minHeight='130px' style={righSidebar}>\r\n                        <p>Recommended</p>\r\n                        <Users users={recommendedUsers} isFollower={false}\r\n                               handler={followUnfollowTrigger} resetDate={resetDate}/>\r\n                        <ShowMoreButton text={btnText[1]} isVisible={btnRecVisible} handler={showFullLists}/>\r\n                    </BoxStyled>\r\n\r\n\r\n                    <BoxStyled className='footer' minHeight='50px' style={righSidebar}>\r\n                        Footer Notes\r\n                    </BoxStyled>\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <ModalCustom/>\r\n        </StyledApp>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst StyledApp = styled.div`\r\n  text-align: center;\r\n  color: darkred;\r\n  border-radius: 5px;\r\n  font-size: 11px;\r\n  border: 1px solid darkgray;\r\n`;\r\n\r\n\r\nconst BoxStyled = styled(Box)`\r\nborder: 1px solid lightgray;\r\nbox-shadow: 4px 4px 8px 1px rgba(34, 60, 80, 0.2);\r\n`;\r\nconst BoxStyledHeader = styled(BoxStyled)`\r\ndisplay: flex;\r\nflex-direction: row;\r\nflex-wrap: nowrap;\r\njustify-content: space-between;\r\nmin-height: 30px;\r\n`;\r\n\r\nconst righSidebar = {\r\n    width: '190%',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    margin: '3px auto',\r\n};\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst NavBar = () => {\r\n    return(\r\n    <StyledNav>\r\n        <StyledNavLink exact to={`/posts/latest/`}>Feed</StyledNavLink>\r\n        {/*<StyledNavLink to={'/utils'}>utils</StyledNavLink>*/}\r\n    </StyledNav>\r\n);\r\n\r\n};\r\nexport default NavBar;\r\n\r\nconst LiStyled = styled.li`\r\n  margin: 0 8px;\r\n`;\r\n\r\nconst StyledNavLink = styled(NavLink)`\r\nfont-size: 20px;\r\nborder: 2px solid darkred;\r\nborder-radius: 6px;\r\ncolor: darkgreen;\r\ntext-decoration: none;\r\n   margin: 2px 8px;\r\n&.active {\r\ncolor: darkred;\r\nmargin: 0 10px; //дополнительно выделяет активную ссылку отступами справа и слева\r\n}`;\r\nconst StyledNav = styled.nav`\r\ndisplay: flex;\r\njustify-content: center;\r\n//gap: 6%;\r\nmargin-top: 6px;\r\nmargin-bottom: 10px;\r\n list-style-type: none;\r\n background-color: lightgray;\r\n //max-width: 80%;\r\n`;\r\n","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\n\r\nimport PostModal from './pages/PostModal';\r\nimport UserPosts from './pages/userPosts';\r\nimport ErrorMessage from \"./components/ErrorBoundary/ErrorMessage\";\r\nimport App from './pages/App';\r\nimport NavBar from \"./components/navBar\";\r\n// import Utils from \"./pages/utils\";\r\n\r\n\r\nconst AppRouts = () => {\r\n    return (\r\n        <div>\r\n            <NavBar/>\r\n            <Switch>\r\n                <Route exact path={'/'} render={()=><Redirect to={`/posts/latest/`}/> }/>\r\n                <Route path={`/posts/latest/`} component={App}/>\r\n                <Route exact path={`/posts/:userNick`} component={UserPosts}/> />\r\n                {/*<Route exact path={`/posts/:userNick`} render = { (rProps)=> <UserPosts {...rProps} /> } />*/}\r\n\r\n                <Route path={'/post/'}   component={PostModal}/>\r\n                {/*<Route path={'/utils'} component={Utils}/>*/}\r\n                <Route path={'*'} component={ErrorMessage}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\nexport default AppRouts;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';   // reset CSS  https://material-ui.com/ru/components/css-baseline/\r\nimport Container from '@material-ui/core/Container'; //берем Material UI контейнер для глобального центрирования\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport store from './redux/store';\r\nimport './reset.css';\r\nimport './index.scss';\r\nimport ErrorBoundary from \"./components/ErrorBoundary/ErrorBoundary\";\r\nimport AppRouts from \"./AppRouts\";\r\nimport {createGlobalStyle} from 'styled-components';\r\n\r\nconst Global = createGlobalStyle`\r\na {\r\ntext-decoration: none;\r\n}\r\n.boxGenStyle {\r\nborder: 1px solid lightgray;\r\nbox-shadow: 4px 4px 8px 1px rgba(34, 60, 80, 0.2);\r\nbox-sizing: border-box;\r\n}\r\n`;\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <CssBaseline>\r\n                    <ErrorBoundary>\r\n                        <Container align='center'>\r\n                            <Global/>\r\n                            <AppRouts/>\r\n                        </Container>\r\n                    </ErrorBoundary>\r\n                </CssBaseline>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>, document.getElementById('root')\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error-page\":\"errorMessage_error-page__304G8\",\"error-img\":\"errorMessage_error-img__o3Ptu\"};"],"sourceRoot":""}